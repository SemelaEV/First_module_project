from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN, BOT_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'ranslate': '–†—É—Å—Å–∫–æ-—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å üìù'   #—ç—Ç–æ –Ω–µ –æ–ø–∏—Å–∫–∞, —ç—Ç–æ RANDOM TRANSLATE
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })

### 1. *–≠—Ö–æ-–±–æ—Ç*

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)


### 2. *"–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç"*
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = load_prompt('random')
    message = load_message('random')
    await send_image(update, context, 'random')
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt, "")
    await send_text_buttons(update, context, answer, {
        'random_more': '–•–æ—á—É –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç',
        'random_end': '–ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ —Ñ–∞–∫—Ç–æ–≤'
    })


async def random_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'random'
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'random_more':
        await random(update, context)
        # await send_text(update, context, '–ù–∞–∂–º–∏—Ç–µ /random')
    else:
        await send_text(update, context, '–ù–∞–∂–º–∏—Ç–µ /start')


### 3. *ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å*
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...")
    answer = await chat_gpt.add_message(text)
    # await message.edit_text(answer)
    await send_text_buttons(update, context, answer, {'stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É'})


### 4. *"–î–∏–∞–ª–æ–≥ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é"*
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    message = load_message('talk')
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥'
    })


async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'talk_cobain':
        person_info = 'talk_cobain'
        person_message = load_message('talk_cobain')
    elif cb == 'talk_queen':
        person_info = 'talk_queen'
        person_message = load_message('talk_queen')
    elif cb == 'talk_tolkien':
        person_info = 'talk_tolkien'
        person_message = load_message('talk_tolkien')
    elif cb == 'talk_nietzsche':
        person_info = 'talk_nietzsche'
        person_message = load_message('talk_nietzsche')
    elif cb == 'talk_hawking':
        person_info = 'talk_hawking'
        person_message = load_message('talk_hawking')

    global talk_prompt
    talk_prompt = load_prompt(person_info)
    chat_gpt.set_prompt(talk_prompt)
    await send_image(update, context, person_info)
    await send_text(update, context, person_message)


async def talk_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.send_question(talk_prompt, text)
    await send_text_buttons(update, context, answer, {'stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É'})


### 5. *"–ö–≤–∏–∑"*
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = load_prompt('quiz')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'quiz')
    text = load_message('quiz')
    context.user_data['count'] = 0
    context.user_data['good'] = 0
    await send_text_buttons(update, context, text, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ Python',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏ - —Ç–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç–µ–æ—Ä–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })


async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'quiz'
    await update.callback_query.answer()
    cb = update.callback_query.data
    question = await chat_gpt.add_message(cb)
    await send_text(update, context, question)


async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    result = await chat_gpt.add_message(answer)
    if result.startswith('–ü—Ä–∞–≤–∏–ª—å–Ω'):
        context.user_data['good'] += 1
    context.user_data['count'] += 1

    count = context.user_data['count']
    good = context.user_data['good']

    result = f'{result}\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count}\n –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {good}'
    await send_text_buttons(update, context, result, {
        'q_next_question': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
        'q_change_theme': '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É',
        'stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'
    })


async def quiz_any_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'q_next_question':
        message = await chat_gpt.add_message('quiz_more')
        await send_text(update, context, message)
    else:
        await send_text_buttons(update, context, '–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è:',
                                {'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
                                 'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏',
                                 'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è',
                                 })


### 6. **–í–æ—Ç —Ç–∞–∫–æ–π –≤–æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫**
async def ranslate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'ranslate'
    prompt = load_prompt('ranslate')
    message = load_message('ranslate')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'ranslate')
    await send_text(update, context, message)


async def ranslate_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update, context, "–í—ã–±–∏—Ä–∞—é —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞...")
    answer = await chat_gpt.add_message(text)
    await send_text_buttons(update, context, answer, {'stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É'})


async def stop_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'talk':
        await talk_dialog(update, context)
    elif dialog.mode == 'quiz':
        await quiz_dialog(update, context)
    elif dialog.mode == 'ranslate':
        await ranslate_dialog(update, context)
    else:
        await echo(update, context)


dialog = Dialog()
dialog.mode = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('ranslate', ranslate))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(random_button, pattern='^random.*'))
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz.*'))
app.add_handler(CallbackQueryHandler(quiz_any_buttons, pattern='^q_.*'))
app.add_handler(CallbackQueryHandler(stop_button, pattern='^stop.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
